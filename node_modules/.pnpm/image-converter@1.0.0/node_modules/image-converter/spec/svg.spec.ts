import dm = require('../app/document.manager'); 
import chai = require('chai');

describe("A suite", function() {
  var manager:dm.DocumentManager;

  var parser = new DOMParser();
  var serializer = new XMLSerializer();

  beforeEach(function(){
    manager = new dm.DocumentManager(parser, serializer);
  });

  it("contains spec with an expectation", function() {
    console.log("#1");
    expect(true).toBe(true);
  });

  it("should return default size of 300", function() {
    console.log("#2");
    expect(manager.width()).toBe(300);
  });

  it("should create a document and use the width and height of the svg.", function() {
    console.log("#3");
    var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
    manager.create(parser.parseFromString(svg, "text/xml"));
    expect(manager.width()).toBe(100);
    expect(manager.height()).toBe(100);
  });

  it("should create a document and add xml namespace", function() {
    console.log("#4");
    var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
    manager.create(parser.parseFromString(svg, "text/xml"));
    expect(manager.svgDoc).not.toBeNull();
    expect(manager.svgDoc.documentElement.getAttribute("xmlns")).toBe("http://www.w3.org/2000/svg");
    expect(manager.svgString()).toContain("http://www.w3.org/2000/svg");

  });

  it("should create a document without defs and add style", function() {
    console.log("#5");
    var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
    manager.create(parser.parseFromString(svg, "text/xml"));
    manager.addStyle('circle{fill:red}');
    manager.applyStyles();
    expect(manager.svgString()).toContain("<defs>");
  });

  it("when styles are added before a document, it should work in the same way", function() {
    console.log("#6");
    var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
    manager.addStyle('circle{fill:red}');
    manager.create(parser.parseFromString(svg, "text/xml"));
    manager.applyStyles();
    expect(manager.svgString()).toContain("<defs>");
  });


  it("should create a document with styles defs and replace with new ones", function() {
    console.log("#7");
    var svg = '<svg width="100" height="100"><defs><style>circle{fill:blue}</style></defs><circle cx="10" cy="10" ry="10" /></svg>';
    manager.create(parser.parseFromString(svg, "text/xml"));
    manager.addStyle('circle{fill:red}');
    manager.applyStyles();
    expect(manager.svgString()).toContain("circle{fill:red}");
  });


  it("should create a document with styles defs and replace with new ones", function() {
    console.log("#8");
    var svg = '<svg width="100" height="100"><defs><pattern><circle/></pattern><style>circle{fill:blue}</style></defs><circle cx="10" cy="10" ry="10" /></svg>';
    var style = 'circle{fill:red}';
    manager.create(parser.parseFromString(svg, "text/xml"));
    manager.addStyle(style);
    manager.applyStyles();
    expect(manager.svgString()).toContain("circle{fill:red}");
    expect(manager.svgString()).toContain("<pattern>");
  });

  it("should create a document from multiple css", function() {
    console.log("#9");
    var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
    
    manager.create(parser.parseFromString(svg, "text/xml"));
    manager.addStyle('circle{fill:red}');
    manager.addStyle('rect{stroke:white}');
    manager.applyStyles();
    expect(manager.svgString()).toContain("circle{fill:red}");
    expect(manager.svgString()).toContain("rect{stroke:white}");
    
  });

  it("should create a png dataUrl", function() {
    console.log("#10");
    console.log("Create a data Url");
      var svg = '<svg width="100" height="100"><circle cx="10" cy="10" ry="10" /></svg>';
      
      manager.create(parser.parseFromString(svg, "text/xml"));
      manager.addStyle('circle{fill:red}');
      manager.applyStyles();
      var img = dm.svgToImage(manager.svgString());
      var data = dm.createDataUrl(img);
      //chai.expect(data).to.startsWith("abcd");
      expect(data).toContain("data:image/png;base64");
      
    });



});