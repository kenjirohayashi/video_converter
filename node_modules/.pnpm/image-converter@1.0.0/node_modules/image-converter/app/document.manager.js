"use strict";
function createDataUrl(img) {
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    return canvas.toDataURL("image/png");
}
exports.createDataUrl = createDataUrl;
function svgToImage(svg) {
    var img = new Image;
    img.src = "data:image/svg+xml;base64," + btoa(svg);
    return img;
}
exports.svgToImage = svgToImage;
var DocumentManager = (function () {
    function DocumentManager(parser, serializer) {
        this.parser = parser;
        this.serializer = serializer;
        this.styles = [];
    }
    DocumentManager.prototype.create = function (svgDocument) {
        this.svgDoc = svgDocument;
        var def = this.svgDoc.documentElement.getAttribute("xmlns");
        if (!def) {
            this.svgDoc.documentElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        }
    };
    DocumentManager.prototype.createStyleElement = function (style) {
        var styleElement = this.svgDoc.createElement("style");
        styleElement.setAttribute("type", "text/css");
        var cdata = this.svgDoc.createCDATASection(style);
        styleElement.appendChild(cdata);
        return styleElement;
    };
    DocumentManager.prototype.createDefsElement = function () {
        var defs = this.svgDoc.createElement("defs");
        this.svgDoc.documentElement.appendChild(defs);
        return defs;
    };
    DocumentManager.prototype.applyStyles = function () {
        var defList = this.svgDoc.getElementsByTagName("defs");
        var defs = defList[0];
        if (!defs || defs.length == 0) {
            defs = this.createDefsElement();
        }
        for (var i = 0; i < this.styles.length; i++) {
            var styleElement = this.createStyleElement(this.styles[i]);
            defs.appendChild(styleElement);
        }
    };
    DocumentManager.prototype.addStyle = function (style) {
        this.styles.push(style);
    };
    DocumentManager.prototype.width = function () {
        console.log("Calculate width from svg");
        if (this.svgDoc) {
            var width = Number(this.svgDoc.documentElement.getAttribute("width"));
            console.log("Found width:" + width);
            if (width) {
                return width;
            }
        }
        return 300;
    };
    DocumentManager.prototype.height = function () {
        console.log("Calculate height from svg");
        if (this.svgDoc) {
            var height = Number(this.svgDoc.documentElement.getAttribute("height"));
            console.log("Found height:" + height);
            if (height) {
                return height;
            }
        }
        return 300;
    };
    DocumentManager.prototype.svgString = function () {
        return this.serializer.serializeToString(this.svgDoc.documentElement);
    };
    DocumentManager.prototype.createDocument = function (svgDocument) {
        this.create(this.parser.parseFromString(svgDocument, "text/xml"));
    };
    DocumentManager.prototype.convertToPngData = function (callback) {
        if (this.svgDoc) {
            var img = svgToImage(this.svgString());
            img.width = this.width();
            img.height = this.height();
            img.onload = function () {
                var data = createDataUrl(this);
                callback(data);
            };
        }
    };
    return DocumentManager;
}());
exports.DocumentManager = DocumentManager;
//# sourceMappingURL=document.manager.js.map