export function createDataUrl(img:HTMLImageElement):string{
    var canvas = document.createElement("canvas");
    
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    return canvas.toDataURL("image/png");
}

export function svgToImage(svg:string):HTMLImageElement{
    var img = new Image;
    img.src = "data:image/svg+xml;base64," + btoa(svg);
    return img;
}



export class DocumentManager {
    svgDoc: any;
    styles: string[] = [];

    constructor(private parser:DOMParser, private serializer:XMLSerializer) {

    }

    create(svgDocument:Document){
        this.svgDoc = svgDocument;
        var def = this.svgDoc.documentElement.getAttribute("xmlns");
        if (!def) {
            this.svgDoc.documentElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        }
    }
    
    createStyleElement(style: string): any {
        var styleElement = this.svgDoc.createElement("style");
        styleElement.setAttribute("type", "text/css");
        var cdata = this.svgDoc.createCDATASection(style);
        styleElement.appendChild(cdata);
        return styleElement;
    }

    createDefsElement(): Element {
        let defs = this.svgDoc.createElement("defs");
        this.svgDoc.documentElement.appendChild(defs);
        return defs;
    }

    applyStyles() {
        let defList = this.svgDoc.getElementsByTagName("defs");
        let defs = defList[0];
        if (!defs || defs.length == 0) {
            defs = this.createDefsElement();
        }

        for (var i = 0; i < this.styles.length; i++) {
            var styleElement = this.createStyleElement(this.styles[i]);
            defs.appendChild(styleElement);
        }
    }

    addStyle(style: string) {
        this.styles.push(style);
    }

    width(): number {
        console.log("Calculate width from svg");
        if(this.svgDoc){
            let width =  Number(this.svgDoc.documentElement.getAttribute("width"))
            console.log("Found width:"+width);
            if(width){
                return width;
            }
        }
        
        return 300;
    }

    height(): number {
        console.log("Calculate height from svg");
        if(this.svgDoc){
            let height =  Number(this.svgDoc.documentElement.getAttribute("height"));
            console.log("Found height:"+height);
            if(height){
                return height;
            }
        }
        
        return 300;
    }

    svgString(): string {
        return this.serializer.serializeToString(this.svgDoc.documentElement);
    }

    createDocument(svgDocument: string) {
        this.create(this.parser.parseFromString(svgDocument, "text/xml"));      
    }

    convertToPngData(callback) {
        if (this.svgDoc) {
            var img:HTMLImageElement = svgToImage(this.svgString());
            img.width = this.width();
            img.height = this.height();
            img.onload = function () {
                var data = createDataUrl(this);
                callback(data);
            };
        }
    }

    
    
}