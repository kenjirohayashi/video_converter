/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var doc = __webpack_require__(1);
	//import clipboard = require('clipboard');
	var manager = new doc.DocumentManager(new DOMParser(), new XMLSerializer());
	var svgContainerId = "svg-container";
	function convert() {
	    console.log("Start Convert");
	    manager.convertToPngData(function (data) {
	        var body = document.querySelector('body');
	        var text = document.createElement("p");
	        text.id = "final-data";
	        text.innerHTML = data;
	        body.appendChild(text);
	        var img = new Image;
	        img.src = data;
	        body.appendChild(img);
	    });
	}
	function clearSvg() {
	    var container = document.getElementById('svg-container');
	    var svg = document.querySelector("#svg-container svg");
	    if (svg) {
	        container.removeChild(svg);
	    }
	}
	function loadFile(file) {
	    var reader = new FileReader();
	    reader.onload = (function (e) {
	        console.log(file.name);
	        if (file.name.endsWith(".css")) {
	            loadStyleFromFile(file);
	        }
	        else if (file.name.endsWith(".svg")) {
	            loadImageFromFile(file);
	        }
	    });
	    reader.readAsText(file);
	}
	function loadImageFromFile(file) {
	    var reader = new FileReader();
	    reader.onload = (function (e) {
	        manager.createDocument(reader.result);
	        updateSvg();
	    });
	    reader.readAsText(file);
	}
	function loadStyleFromFile(file) {
	    var reader = new FileReader();
	    reader.onload = (function (e) {
	        manager.addStyle(reader.result);
	        applyStyles();
	    });
	    reader.readAsText(file);
	}
	function applyStyles() {
	    if (manager.svgDoc) {
	        manager.applyStyles();
	        clearSvg();
	        updateSvg();
	    }
	}
	function updateSvg() {
	    var container = document.getElementById(svgContainerId);
	    container.innerHTML += manager.svgString();
	}
	function handleFileSelect(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    for (var i = 0, f; f = evt.dataTransfer.files[i]; i++) {
	        loadFile(f);
	    }
	}
	function handleDragOver(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    evt.dataTransfer.dropEffect = 'copy';
	}
	window.onload = function () {
	    console.log('Window load');
	    var svgDropZone = document.getElementById('drop-zone');
	    svgDropZone.addEventListener('dragover', handleDragOver, false);
	    svgDropZone.addEventListener('drop', handleFileSelect, false);
	    var clearBtn = document.getElementById("clearBtn");
	    console.log(clearBtn);
	    clearBtn.addEventListener('click', function () {
	        console.log('Click Clear');
	        clearSvg();
	    });
	    var generateBtn = document.getElementById("generateBtn");
	    console.log(generateBtn);
	    generateBtn.addEventListener('click', function () {
	        console.log('Click generate');
	        convert();
	    });
	};


/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	function createDataUrl(img) {
	    var canvas = document.createElement("canvas");
	    canvas.width = img.width;
	    canvas.height = img.height;
	    var ctx = canvas.getContext("2d");
	    ctx.drawImage(img, 0, 0);
	    return canvas.toDataURL("image/png");
	}
	exports.createDataUrl = createDataUrl;
	function svgToImage(svg) {
	    var img = new Image;
	    img.src = "data:image/svg+xml;base64," + btoa(svg);
	    return img;
	}
	exports.svgToImage = svgToImage;
	var DocumentManager = (function () {
	    function DocumentManager(parser, serializer) {
	        this.parser = parser;
	        this.serializer = serializer;
	        this.styles = [];
	    }
	    DocumentManager.prototype.create = function (svgDocument) {
	        this.svgDoc = svgDocument;
	        var def = this.svgDoc.documentElement.getAttribute("xmlns");
	        if (!def) {
	            this.svgDoc.documentElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
	        }
	    };
	    DocumentManager.prototype.createStyleElement = function (style) {
	        var styleElement = this.svgDoc.createElement("style");
	        styleElement.setAttribute("type", "text/css");
	        var cdata = this.svgDoc.createCDATASection(style);
	        styleElement.appendChild(cdata);
	        return styleElement;
	    };
	    DocumentManager.prototype.createDefsElement = function () {
	        var defs = this.svgDoc.createElement("defs");
	        this.svgDoc.documentElement.appendChild(defs);
	        return defs;
	    };
	    DocumentManager.prototype.applyStyles = function () {
	        var defList = this.svgDoc.getElementsByTagName("defs");
	        var defs = defList[0];
	        if (!defs || defs.length == 0) {
	            defs = this.createDefsElement();
	        }
	        for (var i = 0; i < this.styles.length; i++) {
	            var styleElement = this.createStyleElement(this.styles[i]);
	            defs.appendChild(styleElement);
	        }
	    };
	    DocumentManager.prototype.addStyle = function (style) {
	        this.styles.push(style);
	    };
	    DocumentManager.prototype.width = function () {
	        console.log("Calculate width from svg");
	        if (this.svgDoc) {
	            var width = Number(this.svgDoc.documentElement.getAttribute("width"));
	            console.log("Found width:" + width);
	            if (width) {
	                return width;
	            }
	        }
	        return 300;
	    };
	    DocumentManager.prototype.height = function () {
	        console.log("Calculate height from svg");
	        if (this.svgDoc) {
	            var height = Number(this.svgDoc.documentElement.getAttribute("height"));
	            console.log("Found height:" + height);
	            if (height) {
	                return height;
	            }
	        }
	        return 300;
	    };
	    DocumentManager.prototype.svgString = function () {
	        return this.serializer.serializeToString(this.svgDoc.documentElement);
	    };
	    DocumentManager.prototype.createDocument = function (svgDocument) {
	        this.create(this.parser.parseFromString(svgDocument, "text/xml"));
	    };
	    DocumentManager.prototype.convertToPngData = function (callback) {
	        if (this.svgDoc) {
	            var img = svgToImage(this.svgString());
	            img.width = this.width();
	            img.height = this.height();
	            img.onload = function () {
	                var data = createDataUrl(this);
	                callback(data);
	            };
	        }
	    };
	    return DocumentManager;
	}());
	exports.DocumentManager = DocumentManager;


/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map